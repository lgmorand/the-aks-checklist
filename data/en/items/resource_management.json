[
  {
    "title": "Burst serverless with Azure Container Instances and Virtual Nodes",
    "priority": "Low",
    "description": "To rapidly scale your AKS cluster, you can integrate with Azure Container Instances (ACI)",
    "detail": "Kubernetes has built-in components to scale the replica and node count. However, if your application needs to rapidly scale, the horizontal pod autoscaler may schedule more pods than can be provided by the existing compute resources in the node pool.",
    "documentation": [
      {
        "title": "Burst to Azure Container Instances",
        "url": "https://learn.microsoft.com/en-gb/azure/aks/concepts-scale#burst-to-azure-container-instances"
      }
    ],
    "tags": [
      "all",
      "operations",
      "sustainability",
      "finops"
    ]
  },
  {
    "title": "Sizing of the nodes",
    "priority": "Medium",
    "description": "what type of worker nodes should I use, and how many of them is a critical question which requires the analysis of the workloads deployed on your cluster to get the best values of it",
    "detail": "Choosing on one hand between easy management and big blast radius, and on the other end to focus on high replication, low impact but worse resources optimization ",
    "documentation": [
      {
        "title": "Choosing a worker node size",
        "url": "https://learnk8s.io/kubernetes-node-size"
      },
      {
        "title": "Choose the right storage type",
        "url": "https://docs.microsoft.com/azure/aks/operator-best-practices-storage#choose-the-appropriate-storage-type"
      }
    ],
    "tools": [
      {
        "title": "Kubernetes instance calculator",
        "url": "https://learnk8s.io/kubernetes-instance-calculator"
      }
    ],
    "tags": [
      "all",
      "sustainability",
      "resources"
    ]
  },
  {
    "title": "Consider spot node pools for non time-sensitive workloads",
    "priority": "Low",
    "description": "Using Spot VMs for nodes with your AKS cluster allows you to take advantage of unutilized capacity in Azure at a significant cost savings",
    "documentation": [
      {
        "title": "Add an Azure Spot node pool to an Azure Kubernetes Service (AKS) cluster",
        "url": "https://learn.microsoft.com/en-us/azure/aks/spot-node-pool"
      }
    ],
    "tags": [
      "all",
      "operations",
      "finops"
    ]
  },
  {
    "title": "Use AMD64 nodes when possible",
    "priority": "Medium",
    "description": "Benefit from ARM64's better price, compute performance, and lower power utilization in AKS node pools.",
    "documentation": [
      {
        "title": "Add an ARM64 node pool",
        "url": "https://learn.microsoft.com/en-us/azure/aks/use-multiple-node-pools#add-an-arm64-node-pool"
      }
    ],
    "tags": [
      "all",
      "sustainability",
      "operations"
    ]
  },
  {
    "title": "Enforce resource quotas for namespaces",
    "priority": "Low",
    "description": "Plan and apply resource quotas at the namespace level. If pods don't define resource requests and limits, reject the deployment. Monitor resource usage and adjust quotas as needed.",
    "detail": "Resource requests and limits are placed in the pod specification. These limits are used by the Kubernetes scheduler at deployment time to find an available node in the cluster. But developers can forget them and thus impact other applications by over-consuming resources of the cluster",
    "documentation": [
      {
        "title": "Enforce resource quotas",
        "url": "https://docs.microsoft.com/azure/aks/operator-best-practices-scheduler#enforce-resource-quotas"
      },
      {
        "title": "Resources quotas",
        "url": "https://kubernetes.io/docs/concepts/policy/resource-quotas/"
      }
    ],
    "tags": [
      "all",
      "resiliency",
      "resource management",
      "sustainability",
      "multi-tenancy"
    ]
  },
  {
    "title": "Namespaces should have LimitRange",
    "priority": "Low",
    "description": " A LimitRange is a policy to constrain resource allocations (to Pods or Containers) in a namespace. It's useful to ensure that pods don't forget to declare request limits",
    "documentation": [
      {
        "title": "LimitRange",
        "url": "https://kubernetes.io/docs/concepts/policy/limit-range/"
      }
    ],
    "tags": [
      "all",
      "resiliency",
      "resource management",
      "sustainability",
      "multi-tenancy"
    ]
  },
  {
    "title": "Set memory limits and requests for all containers",
    "priority": "Medium",
    "description": "Set CPU and memory limits and requests to all the containers. It prevents memory leaks and CPU over-usage and protects the whole platform",
    "detail": " When you specify limits for CPU and memory, each takes a different action when it reaches the specified limit. With CPU limits, the container is throttled from using more than its specified limit. With memory limits, the pod is restarted if it reaches its limit. The pod might be restarted on the same host or a different host within the cluster.",
    "documentation": [
      {
        "title": "Define pod resource requests and limits",
        "url": "https://learn.microsoft.com/en-gb/azure/aks/developer-best-practices-resource-management#define-pod-resource-requests-and-limits"
      },
      {
        "title": "Assign Memory Resources to container",
        "url": "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/"
      }
    ],
    "tags": [
      "all",
      "resiliency",
      "resource management",
      "sustainability",
      "multi-tenancy"
    ]
  },
  {
    "title": "Use Disruption Budgets in your pod and deployment definitions",
    "priority": "Low",
    "description": "To maintain the availability of applications, define Pod Disruption Budgets (PDBs) to make sure that a minimum number of pods are available in the cluster.",
    "detail": "At some point in time, Kubernetes might need to evict pods from a host. There are two types of evictions: voluntary and involuntary disruptions. Involuntary disruptions can be caused by hardware failure, network partitions, kernel panics, or a node being out of resources. Voluntary evictions can be caused by performing maintenance on the cluster, the Cluster Autoscaler deallocating nodes, or updating pod templates. To minimize the impact to your application, you can set a PodDisruptionBudget to ensure uptime of the application when pods need to be evicted. A PodDisruptionBudget allows you to set a policy on the minimum available and maximum unavailable pods during voluntary eviction events. An example of a voluntary eviction would be when draining a node to perform maintenance on the node.",
    "documentation": [
      {
        "title": "Plan for availability using pod disruption budgets",
        "url": "https://docs.microsoft.com/azure/aks/operator-best-practices-scheduler#plan-for-availability-using-pod-disruption-budgets"
      },
      {
        "title": "Specifying a Disruption Budget for your Application",
        "url": "https://kubernetes.io/docs/tasks/run-application/configure-pdb/"
      }
    ],
    "tags": [
      "all",
      "resiliency",
      "resource management"
    ]
  },
  {
    "title": "Set up cluster auto-scaling",
    "priority": "Low",
    "description": "To maintain the availability of applications and guarantee available resources, set up cluster auto-scaling",
    "documentation": [
      {
        "title": "Use AKS cluster auto-scale",
        "url": "https://docs.microsoft.com/azure/aks/cluster-autoscaler"
      }
    ],
    "tags": [
      "all",
      "resiliency",
      "resource management",
      "sustainability",
      "finops"
    ]
  },
  {
    "title": "Use an external application such as kubecost to allocate costs to different users",
    "priority": "Low",
    "description": "These tools can be very valuable for cost allocation especially in the case of multitenancy",
    "documentation": [
      {
        "title": "cost governance with kubecost",
        "url": "https://docs.microsoft.com/azure/cloud-adoption-framework/scenarios/aks/eslz-cost-governance-with-kubecost"
      }
    ],
    "tags": [
      "all",
      "finops",
      "resource management"
    ]
  },
  {
    "title": "When required use multi-instance partioning GPU on AKS Clusters",
    "priority": "Medium",
    "description": "Nvidia's A100 GPU can be divided in up to seven independent instances. Each instance has their own memory and Stream Multiprocessor (SM).",
    "documentation": [
      {
        "title": "Multi-instance GPU Node pool",
        "url": "https://learn.microsoft.com/azure/aks/gpu-multi-instance"
      }
    ],
    "tags": [
      "all",
      "finops",
      "resource management"
    ]
  },
  {
    "title": "If running a Dev/Test cluster use NodePool Start/Stop",
    "priority": "Medium",
    "description": "Your AKS workloads may not need to run continuously, for example a development cluster that has node pools running specific workloads.",
    "documentation": [
      {
        "title": "Start and stop an Azure Kubernetes Service (AKS) node pool",
        "url": "https://learn.microsoft.com/azure/aks/start-stop-nodepools"
      }
    ],
    "tags": [
      "all",
      "finops",
      "sustainability",
      "resource management"
    ]
  },
  {
    "title": "Ensure your subscription has enough quota to scale out your nodepools",
    "priority": "High",
    "description": "Azure VMs/nodes have quotas per subscription. Ensure that you have planned for these quota and proactively prepare to request for more if needed",
    "documentation": [
      {
        "title": "Azure subscription and service limits, quotas, and constraints",
        "url": "https://learn.microsoft.com/azure/azure-resource-manager/management/azure-subscription-service-limits"
      }
    ],
    "tags": [
      "all",
      "scalability",
      "resource management"
    ]
  }
]
